// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model CustomDomain {
  id          String    @id @default(cuid())
  domain      String    @unique
  communityId String
  Community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Community {
  id            String         @id @default(cuid())
  name          String
  subdomain     String         @unique
  parkingSpaces Int
  timezone      String         @default("America/Los_Angeles")
  CustomDomains CustomDomain[]
  Houses        House[]
  Reservations  Reservation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model House {
  id           String        @id @default(cuid())
  unit         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  communityId  String
  Community    Community     @relation(fields: [communityId], references: [id])
  Users        User[]
  Vehicles     Vehicle[]
  Reservations Reservation[]

  @@unique([communityId, unit])
}

model Vehicle {
  id           String        @id @default(cuid())
  name         String
  description  String?
  licensePlate String
  personal     Boolean
  hidden       Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String?
  User         User?         @relation(fields: [userId], references: [id])
  houseId      String?
  House        House?        @relation(fields: [houseId], references: [id])
  Reservations Reservation[]

  @@unique([licensePlate, houseId])
}

model Reservation {
  id           String    @id @default(cuid())
  reservedFrom DateTime
  reservedTo   DateTime
  userId       String
  User         User?     @relation(fields: [userId], references: [id])
  houseId      String
  House        House     @relation(fields: [houseId], references: [id])
  communityId  String
  Community    Community @relation(fields: [communityId], references: [id])
  vehicleId    String
  Vehicle      Vehicle   @relation(fields: [vehicleId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Next-Auth stuff

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  houseId       String?
  House         House?        @relation(fields: [houseId], references: [id])
  Reservations  Reservation[]
  Vehicles      Vehicle[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
