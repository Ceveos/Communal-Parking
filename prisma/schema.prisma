// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model CustomDomain {
  id          String    @id @default(uuid())
  domain      String    @unique
  communityId String
  Community   Community @relation(fields: [communityId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Community {
  id            String         @id @default(uuid())
  name          String
  subdomain     String         @unique
  parkingSpaces Int
  CustomDomains CustomDomain[]
  Houses        House[]
  Reservations  Reservation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model House {
  id           String             @id @default(uuid())
  unit         String             @unique
  description  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  communityId  String
  Community    Community          @relation(fields: [communityId], references: [id])
  Users        User[]
  Vehicles     HousesOnVehicles[]
  Reservations Reservation[]
}

model Vehicle {
  id           String             @id @default(uuid())
  name         String
  description  String?
  licensePlate String             @unique
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  Houses       HousesOnVehicles[]
  Reservations Reservation[]
}

model HousesOnVehicles {
  houseId   String
  House     House    @relation(fields: [houseId], references: [id])
  vehicleId String
  Vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([houseId, vehicleId])
}

model User {
  id             String         @id @default(uuid())
  avatar         String?
  firstName      String
  lastName       String
  email          String         @unique
  emailConfirmed Boolean        @default(false)
  role           Role           @default(USER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  houseId        String?
  House          House?         @relation(fields: [houseId], references: [id])
  Password       Password?
  Tokens         RefreshToken[]
  Invite         UserInvite?
  Reservations   Reservation[]
}

model Password {
  id          String   @id
  password    String
  forceChange Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [id], references: [id])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  label      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hash       String   @unique
  valid      Boolean  @default(true)
  expiration DateTime

  // Relation fields
  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model UserInvite {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id])
}

model Reservation {
  id           String    @id @default(uuid())
  reservedFrom DateTime
  reservedTo   DateTime
  userId       String
  User         User?     @relation(fields: [userId], references: [id])
  houseId      String
  House        House     @relation(fields: [houseId], references: [id])
  communityId  String
  Community    Community @relation(fields: [communityId], references: [id])
  vehicleId    String
  Vehicle      Vehicle   @relation(fields: [vehicleId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
